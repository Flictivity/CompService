@using CompService.Client.Data
@using CompService.Core.Enums
@using CompService.Core.Extensions
@using CompService.Core.Models
@using CompService.Core.Services

@inject IOrderService OrderService;
@inject ISnackbar Snackbar;
@inject IClientService ClientService;
@inject IUserService UserService;
@inject IDevicePlaceService DevicePlaceService;
@inject IReferenceService<Defect> DefectService;
@inject IReferenceService<Appearance> AppearanceService;
@inject IReferenceService<DeviceType> DeviceTypeService;
@inject IReferenceService<Brand> BrandService;
@inject IDialogService DialogService;

@if (_isLoaded)
{
    <MudProgressCircular Class="d-flex mx-auto align-self-center" Color="Color.Primary"
                         Style="height:200px;width:200px; margin-top:30vh;" Indeterminate="true"/>
}
else
{
    <MudContainer Style="max-height: 90%; overflow-y: scroll">
    <MudContainer Class="d-flex justify-center">
    <MudForm @bind-IsValid="_success" Model="_model">
    <MudDialog DisableSidePadding="true">
    <TitleContent>

    </TitleContent>
    <DialogContent>
    <MudContainer Class="d-flex justify-around pa-0">
        <MudStack>
            <MudContainer Class="d-flex flex-row pa-0">
                <MudText Typo="Typo.h6" Class="mr-2">Заказ: </MudText>
                <MudText Typo="Typo.body1" Style="line-height: 32px;">@_model.OrderId</MudText>
            </MudContainer>
            <MudContainer Class="d-flex flex-row pa-0">
                <MudText Typo="Typo.h6" Class="mr-2">Дата: </MudText>
                <MudText Typo="Typo.body1"
                         Style="line-height: 32px;">
                    @_model.OrderDate.ToString("dd/MM/yyyy")
                </MudText>
            </MudContainer>
            <MudContainer Class="d-flex flex-row pa-0 mb-1">
                <MudText Typo="Typo.h6" Class="mr-2">Итого: </MudText>
                <MudText Typo="Typo.body1" Style="line-height: 32px;">@_model.Money</MudText>
            </MudContainer>
        </MudStack>
        <MudSelect Class="ml-3" Label="Статус" T="OrdersStatuses" Required="true"
                   RequiredError="Обязательное поле" @bind-Value="@_model.Status"
                   Variant="Variant.Outlined">
            @foreach (OrdersStatuses status in Enum.GetValues(typeof(OrdersStatuses)))
            {
                <MudSelectItem Value="status">
                    <MudChip Class="ma-0"
                             Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[status]};")">
                        @status.GetName()
                    </MudChip>
                </MudSelectItem>
            }
        </MudSelect>
    </MudContainer>
    <MudContainer Class="d-flex flex-column pa-0">
    <MudContainer Class="pa-0">
        <MudTable Class="ma-0 pa-0" Items="_model.SpareParts" T="OrderListModel<SparePart>" Hover="true"
                  OnRowClick="SparePartRowClickEvent" SelectOnRowClick="false"
                   MultiSelection="true" @bind-SelectedItems="_selectedSpareParts">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Запчасти</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchStringSpareParts" Placeholder="Поиск"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Item.Name)">
                        Название
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Item.RetailPrice)">
                        Цена
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Count)">
                        Количество
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Discount)">
                        Скидка %
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Sum)">
                        Итого
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Название">
                    <MudText>@context.Item.Name</MudText>
                </MudTd>
                <MudTd DataLabel="Цена">
                    <MudText>@context.Item.RetailPrice</MudText>
                </MudTd>
                <MudTd DataLabel="Количество">
                    <MudText>@context.Count</MudText>
                </MudTd>
                <MudTd DataLabel="Скидка">
                    <MudText>@context.Discount</MudText>
                </MudTd>
                <MudTd DataLabel="Итого">
                    <MudText>@context.Sum</MudText>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudButton Class="ma-5" Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="@(async () => await OrderSparePartAddWindow())">
                    Добавить
                </MudButton>
                <MudButton Class="ma-5" Variant="Variant.Filled" Color="Color.Secondary"
                           OnClick="async () => await DeleteSpareParts()">Удалить</MudButton>
            </FooterContent>
        </MudTable>
    </MudContainer>
    <MudContainer Class="pa-0 mt-3">
        <MudTable Class="ma-0 pa-0" Items="_model.Facilities" T="OrderListModel<Facility>" Hover="true"
                  OnRowClick="FacilityRowClickEvent" MultiSelection="true" @bind-SelectedItems="_selectedFacilities">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Услуги</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchStringFacilities" Placeholder="Поиск"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Item.Name)">
                        Название
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Item.Cost)">
                        Цена
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Count)">
                        Количество
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Discount)">
                        Скидка %
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Sum)">
                        Итого
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Название">
                    <MudText>@context.Item.Name</MudText>
                </MudTd>
                <MudTd DataLabel="Цена">
                    <MudText>@context.Item.Cost</MudText>
                </MudTd>
                <MudTd DataLabel="Количество">
                    <MudText>@context.Count</MudText>
                </MudTd>
                <MudTd DataLabel="Скидка">
                    <MudText>@context.Discount</MudText>
                </MudTd>
                <MudTd DataLabel="Итого">
                    <MudText>@context.Sum</MudText>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudButton Class="ma-5" Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="@(async () => await OrderSparePartAddWindow())">
                    Добавить
                </MudButton>
                <MudButton Class="ma-5" Variant="Variant.Filled" Color="Color.Secondary">Удалить</MudButton>
            </FooterContent>
        </MudTable>
    </MudContainer>
    <MudContainer Class="d-flex justify-space-between mt-5 pa-0">
        <MudContainer Class="d-flex flex-column pa-0 mr-5">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-3">Клиент</MudText>
                <MudSelect Class="ma-3" Required="true"
                           RequiredError="Обязательное поле" T="Client" @bind-Value="_model.Client"
                           ToStringFunc="@_converterClient" Label="Клиент"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var client in _clients)
                    {
                        <MudSelectItem Value="client"/>
                    }
                </MudSelect>
                <MudTextField Class="ma-3" Value="@_model.Client?.PhoneNumber" Label="Телефон"
                              ReadOnly="@true">
                </MudTextField>
                <MudTextField Class="ma-3" Value="@_model.Client?.Email" Label="Почта"
                              ReadOnly="@true">
                </MudTextField>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudText Class="mb-3" Typo="Typo.h5">Дополнительно</MudText>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="User"
                           @bind-Value="_model.Operator" ToStringFunc="@_converterUser" Label="Оператор"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var user in _operators)
                    {
                        <MudSelectItem Value="user"/>
                    }
                </MudSelect>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="User"
                           @bind-Value="_model.Master" ToStringFunc="@_converterUser" Label="Мастер"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var user in _masters)
                    {
                        <MudSelectItem Value="user"/>
                    }
                </MudSelect>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="DevicePlace"
                           @bind-Value="_model.Place" ToStringFunc="@_converterPlace" Label="Место на стойке"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var place in _places)
                    {
                        <MudSelectItem Value="place"/>
                    }
                </MudSelect>
            </MudPaper>
        </MudContainer>
        <MudContainer Class="d-flex flex-column pa-0">
            <MudPaper Class="pa-4">
                <MudContainer Class="d-flex flex-column">
                    <MudText Class="mb-4" Typo="Typo.h5">Информация</MudText>
                    <MudSelect Class="ma-3" T="RepairTypes" Required="true"
                               RequiredError="Обязательное поле" @bind-Value="_model.RepairType"
                               ToStringFunc="@_converterRepairType" Label="Тип ремонта"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                        @foreach (RepairTypes type in Enum.GetValues(typeof(RepairTypes)))
                        {
                            <MudSelectItem Value="type"/>
                        }
                    </MudSelect>
                    <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="Defect"
                               @bind-Value="_model.Defect" ToStringFunc="@_converterDefect"
                               Label="Причина обращения"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var defect in _defects)
                        {
                            <MudSelectItem Value="defect"/>
                        }
                    </MudSelect>
                    <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="Appearance"
                               @bind-Value="_model.Appearance"
                               ToStringFunc="@_converterAppearance" Label="Внешний вид"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var appearance in _appearances)
                        {
                            <MudSelectItem Value="appearance"/>
                        }
                    </MudSelect>
                    <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле"
                               T="DeviceType" @bind-Value="_model.DeviceType"
                               ToStringFunc="@_converterDeviceType" Label="Вид устройства"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var deviceType in _deviceTypes)
                        {
                            <MudSelectItem Value="deviceType"/>
                        }
                    </MudSelect>
                    <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле"
                               T="Brand" @bind-Value="_model.Brand" ToStringFunc="@_converterBrand"
                               Label="Бренд"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                        @foreach (var brand in _brands)
                        {
                            <MudSelectItem Value="brand"/>
                        }
                    </MudSelect>
                    <MudTextField Class="ma-3" @bind-Value="_model.Model" Label="Модель"
                                  Required="false">
                    </MudTextField>
                    <MudTextField Class="ma-3" @bind-Value="_model.Password" Label="Пароль"
                                  Required="false">
                    </MudTextField>
                </MudContainer>
            </MudPaper>
        </MudContainer>
    </MudContainer>
    </MudContainer>
    </DialogContent>
    </MudDialog>
    </MudForm>
    </MudContainer>
    </MudContainer>
}


@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public string SelectedOrderId { get; set; } = null!;

    private bool _isLoaded = true;

    private string? _searchStringSpareParts;
    private string? _searchStringFacilities;

    private readonly Func<Client?, string?> _converterClient = p => $"{p?.Surname} {p?.Name}";
    private readonly Func<User?, string?> _converterUser = p => $"{p?.Surname} {p?.Name} {p?.Email}";
    private readonly Func<DevicePlace?, string?> _converterPlace = p => p?.Info;
    private readonly Func<Defect?, string?> _converterDefect = p => p?.Name;
    private readonly Func<DeviceType?, string?> _converterDeviceType = p => p?.Name;
    private readonly Func<Appearance?, string?> _converterAppearance = p => p?.Name;
    private readonly Func<Brand?, string?> _converterBrand = p => p?.Name;
    private readonly Func<RepairTypes, string?> _converterRepairType = p => p.GetName();

    private HashSet<OrderListModel<Facility>> _selectedFacilities = new();
    private HashSet<OrderListModel<SparePart>> _selectedSpareParts = new();

    private bool _success;
    private OrderModel _model = new();
    private List<Client> _clients = new();
    private List<User> _operators = new();
    private List<User> _masters = new();
    private List<DevicePlace> _places = new();
    private List<Defect> _defects = new();
    private List<Appearance> _appearances = new();
    private List<DeviceType> _deviceTypes = new();
    private List<Brand> _brands = new();

    private Order? _order;

    protected override async Task OnInitializedAsync()
    {
        _order = await OrderService.GetOrderByIdAsync(SelectedOrderId);
        if (_order is null)
        {
            return;
        }
        _model.Appearance = await AppearanceService.GetReferenceByIdAsync(_order.AppearanceId);
        _model.Client = await ClientService.GetClientByIdAsync(_order.ClientId);
        _model.Operator = await UserService.GetUserByIdAsync(_order.OperatorId);
        _model.Master = await UserService.GetUserByIdAsync(_order.MasterId);
        _model.Place = await DevicePlaceService.GetPlaceByIdAsync(_order.DevicePlaceId);
        _model.RepairType = _order.RepairType;
        _model.Defect = await DefectService.GetReferenceByIdAsync(_order.DefectId);
        _model.DeviceType = await DeviceTypeService.GetReferenceByIdAsync(_order.DeviceTypeId);
        _model.Brand = await BrandService.GetReferenceByIdAsync(_order.BrandId);
        _model.Model = _order.Model;
        _model.Password = _order.DevicePassword;
        _model.SpareParts = _order.SpareParts;
        _model.Facilities = _order.Facilities;
        _model.Money = _order.Money;
        _model.OrderId = _order.OrderId;
        _model.OrderDate = _order.OrderDate;
        _model.Status = _order.Status;

        _clients = (await ClientService.GetAllClientsAsync()).ToList();
        _operators = (await UserService.GetUsersByRoleAsync(Roles.Operator)).ToList();
        _masters = (await UserService.GetFreeMastersAsync()).ToList();
        _places = (await DevicePlaceService.GetFreePlacesAsync()).ToList();
        _defects = (await DefectService.GetAllValuesAsync()).ToList();
        _appearances = (await AppearanceService.GetAllValuesAsync()).ToList();
        _deviceTypes = (await DeviceTypeService.GetAllValuesAsync()).ToList();
        _brands = (await BrandService.GetAllValuesAsync()).ToList();

        _isLoaded = false;
        await base.OnInitializedAsync();
    }

    private Order ConvertToOrder()
    {
        return new Order
        {
            OrderDate = _model.OrderDate,
            ClientId = _model.Client!.ClientId,
            DefectId = _model.Defect!.DefectId,
            AppearanceId = _model.Appearance!.AppearanceId,
            DeviceTypeId = _model.DeviceType!.DeviceTypeId,
            BrandId = _model.Brand!.BrandId,
            Model = _model.Model ?? string.Empty,
            DevicePassword = _model.Password ?? string.Empty,
            OperatorId = _model.Operator!.UserId,
            MasterId = _model.Master!.UserId,
            Status = _model.Status,
            RepairType = _model.RepairType,
            SpareParts = _model.SpareParts, Facilities = _model.Facilities,
            Money = 0, DevicePlaceId = _model.Place!.PlaceId
        };
    }

    private async void SparePartRowClickEvent(TableRowClickEventArgs<OrderListModel<SparePart>> tableRowClickEventArgs)
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
        };
        var parameters = new DialogParameters {{"SelectedSparePart", tableRowClickEventArgs.Item}};

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<SparePart>) result.Data;
        if (result.Canceled) return;

        if (_order is null) return;

        var res = await OrderService.AddSparePart(_model.OrderId!,
            sparePart.Item.SparePartId, sparePart.Count, sparePart.Discount, true);
        if (res.Success)
        {
            Snackbar.Add("Данные упешно обновлены", Severity.Success);
        }
        else
        {
            Snackbar.Add(res.Message, Severity.Error);
        }
        StateHasChanged();
    }


    private async Task OrderSparePartAddWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
        };
        var parameters = new DialogParameters {{"SelectedSparePart", null}};

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<SparePart>) result.Data;
        if (result.Canceled) return;

        if (_order is null) return;

        var res = await OrderService.AddSparePart(_model.OrderId!,
            sparePart.Item.SparePartId, sparePart.Count, sparePart.Discount, false);
        if (res.Success)
        {
            Snackbar.Add("Успешно", Severity.Success);
            _model.SpareParts = (await OrderService.GetOrderSparePartsAsync(_model.OrderId!)).ToList();
        }
        else
        {
            Snackbar.Add(res.Message, Severity.Error);
        }
        StateHasChanged();
    }

    private async void FacilityRowClickEvent(TableRowClickEventArgs<OrderListModel<Facility>> tableRowClickEventArgs)
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullScreen = true
        };
        var parameters = new DialogParameters {{"SelectedItem", tableRowClickEventArgs.Item}};

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;

        if (result.Canceled) return;

        _model.SpareParts = (await OrderService.GetOrderSparePartsAsync(_model.OrderId!)).ToList();
        StateHasChanged();
    }

    private async Task OrderFacilityAddWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
        };
        var parameters = new DialogParameters {{"SelectedFacility", null}};

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
    }

    private async Task DeleteSpareParts()
    {
        if (_selectedSpareParts.Count == 0)
        {
            return;
        }
        
        var res = await OrderService.RemoveSparePart(_model.OrderId!,
            _selectedSpareParts.Select(x => x.Item.SparePartId).ToList());

        if (res.Success)
        {
            Snackbar.Add("Успешно", Severity.Success);
            _model.SpareParts = (await OrderService.GetOrderSparePartsAsync(_model.OrderId!)).ToList();
        }
        else
        {
            Snackbar.Add(res.Message, Severity.Error);
        }
        StateHasChanged();
    }
    //
    // private async Task DeleteFacility()
    // {
    //     
    // }
}