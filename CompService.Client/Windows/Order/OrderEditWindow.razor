@using CompService.Client.Data
@using CompService.Core.Enums
@using CompService.Core.Extensions
@using CompService.Core.Models
@using CompService.Core.Services

@inject IOrderService OrderService;
@inject ISnackbar Snackbar;
@inject IClientService ClientService;
@inject IUserService UserService;
@inject IDevicePlaceService DevicePlaceService;
@inject IReferenceService<Defect> DefectService;
@inject IReferenceService<Appearance> AppearanceService;
@inject IReferenceService<DeviceType> DeviceTypeService;
@inject IReferenceService<Brand> BrandService;
@inject IDialogService DialogService;
@inject UserInfoHolder UserInfoHolder;
@inject ITransactionService TransactionService;
@inject IJSRuntime IJS;

@if (_isLoaded)
{
    <MudProgressCircular Class="d-flex mx-auto align-self-center" Color="Color.Primary"
                         Style="height:200px;width:200px; margin-top:30vh;" Indeterminate="true"/>
}
else
{
    <MudContainer Style="max-height: 90%; overflow-y: scroll">
    <MudContainer Class="d-flex justify-center">
    <MudForm @bind-IsValid="_success" Model="_model">
    <MudDialog DisableSidePadding="true">
    <TitleContent>
        <MudContainer Class="d-flex justify-end pa-0">
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="CloseWindow"></MudIconButton>
        </MudContainer>
    </TitleContent>
    <DialogContent>
    <MudContainer Class="d-flex justify-around pa-0 flex-wrap">
        <MudStack>
            <MudContainer Class="d-flex flex-row pa-0">
                <MudText Typo="Typo.h6" Class="mr-2">Заказ: </MudText>
                <MudText Typo="Typo.body1" Style="line-height: 32px;">@_model.OrderId</MudText>
            </MudContainer>
            <MudContainer Class="d-flex flex-row pa-0">
                <MudText Typo="Typo.h6" Class="mr-2">Дата: </MudText>
                <MudText Typo="Typo.body1"
                         Style="line-height: 32px;">
                    @_model.OrderDate.ToString("dd/MM/yyyy")
                </MudText>
            </MudContainer>
            <MudContainer Class="d-flex flex-row pa-0 mb-1">
                <MudText Typo="Typo.h6" Class="mr-2">Итого: </MudText>
                <MudText Typo="Typo.subtitle1" Style="line-height: 32px;" Color="Color.Success">
                    <b>@_model.Money ₽</b>
                </MudText>
            </MudContainer>
        </MudStack>
        <MudSelect Class="ml-3 mt-2" Label="Статус" T="OrdersStatuses" Required="true"
                   RequiredError="Обязательное поле" @bind-Value="_model.Status"
                   Variant="Variant.Outlined" ReadOnly="@(UserInfoHolder.CurrentUser!.Roles != Roles.Administrator 
                                                          && _model.Status == OrdersStatuses.Closed)">
            @switch (UserInfoHolder.CurrentUser?.Roles)
            {
                case Roles.Administrator:
                {
                    foreach (OrdersStatuses status in Enum.GetValues(typeof(OrdersStatuses)))
                    {
                        <MudSelectItem Value="@status">
                            <MudChip Class="ma-0"
                                     Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[status]};")">
                                @status.GetName()
                            </MudChip>
                        </MudSelectItem>
                    }
                    break;
                }
                case Roles.Operator:
                    <MudSelectItem Value="@OrdersStatuses.NewOrder">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.NewOrder]};")">
                            @OrdersStatuses.NewOrder.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.InAgreement">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.InWork]};")">
                            @OrdersStatuses.InAgreement.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.WaitSparePart">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.WaitSparePart]};")">
                            @OrdersStatuses.WaitSparePart.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Disabled="true" Value="@OrdersStatuses.Finished">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.Finished]};")">
                            @OrdersStatuses.Finished.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.Closed">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.Closed]};")">
                            @OrdersStatuses.Closed.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.ClosedWithProblems">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.ClosedWithProblems]};")">
                            @OrdersStatuses.ClosedWithProblems.GetName()
                        </MudChip>
                    </MudSelectItem>
                    break;
                case Roles.Master:
                    <MudSelectItem Value="@OrdersStatuses.NewOrder">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.NewOrder]};")">
                            @OrdersStatuses.NewOrder.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.InWork">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.InWork]};")">
                            @OrdersStatuses.InWork.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.InAgreement">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.InAgreement]};")">
                            @OrdersStatuses.InAgreement.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.WaitSparePart">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.WaitSparePart]};")">
                            @OrdersStatuses.WaitSparePart.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Value="@OrdersStatuses.Finished">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.Finished]};")">
                            @OrdersStatuses.Finished.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Disabled="true" Value="@OrdersStatuses.Closed">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.Closed]};")">
                            @OrdersStatuses.Closed.GetName()
                        </MudChip>
                    </MudSelectItem>
                    <MudSelectItem Disabled="true" Value="@OrdersStatuses.ClosedWithProblems">
                        <MudChip Class="ma-0"
                                 Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[OrdersStatuses.ClosedWithProblems]};")">
                            @OrdersStatuses.ClosedWithProblems.GetName()
                        </MudChip>
                    </MudSelectItem>
                    break;
                case null:
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </MudSelect>
        <MudIconButton Icon="@Icons.Filled.Print" OnClick="Print"></MudIconButton>
    </MudContainer>
    <MudContainer Class="d-flex flex-column pa-0">
    <MudContainer Class="pa-0">
        <MudTable ReadOnly="@(!_canEdit)" Class="ma-0 pa-0" @ref="_sparePartTable"
                  Items="_model.SpareParts" T="OrderListModel<SparePart>"
                  Hover="true" OnRowClick="SparePartRowClickEvent" SelectOnRowClick="false"
                  MultiSelection="true" @bind-SelectedItems="_selectedSpareParts">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Запчасти</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchStringSpareParts" Placeholder="Поиск"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Item.Name)">
                        Название
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Item.RetailPrice)">
                        Цена
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.ItemCount)">
                        Количество
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Discount)">
                        Скидка %
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<SparePart>, object>(x => x.Sum)">
                        Итого
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Название">
                    <MudText>@context.Item.Name</MudText>
                </MudTd>
                <MudTd DataLabel="Цена">
                    <MudText>@context.Item.RetailPrice</MudText>
                </MudTd>
                <MudTd DataLabel="Количество">
                    <MudText>@context.ItemCount</MudText>
                </MudTd>
                <MudTd DataLabel="Скидка">
                    <MudText>@context.Discount</MudText>
                </MudTd>
                <MudTd DataLabel="Итого">
                    <MudText>@context.Sum</MudText>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudButton Disabled="@(!_canEdit)" Class="ma-5" Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="@(async () => await OrderSparePartAddWindow())">
                    Добавить
                </MudButton>
                <MudButton Disabled="@(!_canEdit)" Class="ma-5" Variant="Variant.Filled" Color="Color.Secondary"
                           OnClick="DeleteSpareParts">
                    Удалить
                </MudButton>
            </FooterContent>
        </MudTable>
    </MudContainer>
    <MudContainer Class="pa-0 mt-3">
        <MudTable ReadOnly="@(!_canEdit)" Class="ma-0 pa-0" @ref="_facilityTable" Items="_model.Facilities" T="OrderListModel<Facility>"
                  Hover="true" OnRowClick="FacilityRowClickEvent" MultiSelection="true"
                  @bind-SelectedItems="_selectedFacilities">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Услуги</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchStringFacilities" Placeholder="Поиск"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Item.Name)">
                        Название
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Item.Cost)">
                        Цена
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.ItemCount)">
                        Количество
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Discount)">
                        Скидка %
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel
                        SortBy="new Func<OrderListModel<Facility>, object>(x => x.Sum)">
                        Итого
                    </MudTableSortLabel>
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Название">
                    <MudText>@context.Item.Name</MudText>
                </MudTd>
                <MudTd DataLabel="Цена">
                    <MudText>@context.Item.Cost</MudText>
                </MudTd>
                <MudTd DataLabel="Количество">
                    <MudText>@context.ItemCount</MudText>
                </MudTd>
                <MudTd DataLabel="Скидка">
                    <MudText>@context.Discount</MudText>
                </MudTd>
                <MudTd DataLabel="Итого">
                    <MudText>@context.Sum</MudText>
                </MudTd>
            </RowTemplate>
            <FooterContent>
                <MudButton Disabled="@(!_canEdit)" Class="ma-5" Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="@(async () => await OrderFacilityAddWindow())">
                    Добавить
                </MudButton>
                <MudButton Class="ma-5" Variant="Variant.Filled" Color="Color.Secondary"
                           OnClick="@(async () => await DeleteFacilities())" Disabled="@(!_canEdit)">
                    Удалить
                </MudButton>
            </FooterContent>
        </MudTable>
    </MudContainer>
    <MudContainer Class="d-flex justify-space-between mt-5 pa-0">
        <MudContainer Class="d-flex flex-column pa-0 mr-5">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-3">Клиент</MudText>
                <MudSelect Class="ma-3" Required="true"
                               RequiredError="Обязательное поле" T="Client" @bind-Value="_model.Client"
                               ToStringFunc="@_converterClient" Label="Клиент"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                        @foreach (var client in _clients)
                        {
                            <MudSelectItem Value="client"/>
                        }
                    </MudSelect>
                <MudTextField Class="ma-3" Value="@_model.Client?.PhoneNumber" Label="Телефон"
                              ReadOnly="@true"
                              Mask="@(new PatternMask("+0 (000) 000 00-00") { CleanDelimiters = true })">
                </MudTextField>
                <MudTextField Class="ma-3" Value="@_model.Client?.Email" Label="Почта"
                              ReadOnly="@true">
                </MudTextField>
            </MudPaper>
            <MudPaper Class="pa-4 mt-4">
                <MudText Class="mb-3" Typo="Typo.h5">Дополнительно</MudText>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="User"
                           @bind-Value="_model.Operator" ToStringFunc="@_converterUser" Label="Оператор"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                    @foreach (var user in _operators)
                    {
                        <MudSelectItem Value="user"/>
                    }
                </MudSelect>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="User"
                           @bind-Value="_model.Master" ToStringFunc="@_converterUser" Label="Мастер"
                           Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                    @foreach (var user in _masters)
                    {
                        <MudSelectItem Value="user"/>
                    }
                </MudSelect>
                <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="DevicePlace"
                               @bind-Value="_model.Place" ToStringFunc="@_converterPlace" Label="Место на стойке"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                        @foreach (var place in _places)
                        {
                            <MudSelectItem Value="place"/>
                        }
                    </MudSelect>
            </MudPaper>
        </MudContainer>
        <MudContainer Class="d-flex flex-column pa-0">
            <MudPaper Class="pa-4">
                <MudContainer Class="d-flex flex-column">
                    <MudText Class="mb-4" Typo="Typo.h5">Информация</MudText>
                    <MudSelect Class="ma-3" T="RepairTypes" Required="true"
                               RequiredError="Обязательное поле" @bind-Value="_model.RepairType"
                               ToStringFunc="@_converterRepairType" Label="Тип ремонта"
                               Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                        @foreach (RepairTypes type in Enum.GetValues(typeof(RepairTypes)))
                        {
                            <MudSelectItem Value="type"/>
                        }
                    </MudSelect>
                    <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="Defect"
                                   @bind-Value="_model.Defect" ToStringFunc="@_converterDefect"
                                   Label="Причина обращения" ReadOnly="@(!_canEdit)"
                                   Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter">
                            @foreach (var defect in _defects)
                            {
                                <MudSelectItem Value="defect"/>
                            }
                        </MudSelect>
                        <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле" T="Appearance"
                                   @bind-Value="_model.Appearance"
                                   ToStringFunc="@_converterAppearance" Label="Внешний вид"
                                   Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                            @foreach (var appearance in _appearances)
                            {
                                <MudSelectItem Value="appearance"/>
                            }
                        </MudSelect>
                        <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле"
                                   T="DeviceType" @bind-Value="_model.DeviceType"
                                   ToStringFunc="@_converterDeviceType" Label="Вид устройства"
                                   Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                            @foreach (var deviceType in _deviceTypes)
                            {
                                <MudSelectItem Value="deviceType"/>
                            }
                        </MudSelect>
                        <MudSelect Class="ma-3" Required="true" RequiredError="Обязательное поле"
                                   T="Brand" @bind-Value="_model.Brand" ToStringFunc="@_converterBrand"
                                   Label="Бренд"
                                   Variant="Variant.Text" AnchorOrigin="Origin.BottomCenter" ReadOnly="@(!_canEdit)">
                            @foreach (var brand in _brands)
                            {
                                <MudSelectItem Value="brand"/>
                            }
                        </MudSelect>
                    <MudTextField Class="ma-3" @bind-Value="_model.Model" Label="Модель"
                                  Required="false" ReadOnly="@(!_canEdit)">
                    </MudTextField>
                    <MudTextField Class="ma-3" @bind-Value="_model.Password" Label="Пароль"
                                  Required="false" ReadOnly="@(!_canEdit)">
                    </MudTextField>
                </MudContainer>
            </MudPaper>
        </MudContainer>
    </MudContainer>
    </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto"
                   OnClick="async () => await SaveChanges()">
            Сохранить
        </MudButton>
    </DialogActions>
    </MudDialog>
    </MudForm>
    </MudContainer>
    </MudContainer>
}


@code {

    [CascadingParameter]
    public MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public string SelectedOrderId { get; set; } = null!;

    private bool _isLoaded = true;

    private string? _searchStringSpareParts;
    private string? _searchStringFacilities;
    private MudTable<OrderListModel<SparePart>>? _sparePartTable;
    private MudTable<OrderListModel<Facility>>? _facilityTable;

    private readonly Func<Client?, string?> _converterClient = p => $"{p?.Surname} {p?.Name}";
    private readonly Func<User?, string?> _converterUser = p => $"{p?.Surname} {p?.Name} {p?.Email}";
    private readonly Func<DevicePlace?, string?> _converterPlace = p => p?.Info;
    private readonly Func<Defect?, string?> _converterDefect = p => p?.Name;
    private readonly Func<DeviceType?, string?> _converterDeviceType = p => p?.Name;
    private readonly Func<Appearance?, string?> _converterAppearance = p => p?.Name;
    private readonly Func<Brand?, string?> _converterBrand = p => p?.Name;
    private readonly Func<RepairTypes, string?> _converterRepairType = p => p.GetName();

    private HashSet<OrderListModel<Facility>> _selectedFacilities = new();
    private HashSet<OrderListModel<SparePart>> _selectedSpareParts = new();

    private bool _success;
    private bool _canEdit = true;
    private OrderModel _model = new();
    private List<Client> _clients = new();
    private List<User> _operators = new();
    private List<User> _masters = new();
    private List<DevicePlace> _places = new();
    private List<Defect> _defects = new();
    private List<Appearance> _appearances = new();
    private List<DeviceType> _deviceTypes = new();
    private List<Brand> _brands = new();

    private Order? order;

    protected override async Task OnInitializedAsync()
    {
        order = await OrderService.GetOrderByIdAsync(SelectedOrderId);
        if (order is null)
        {
            return;
        }
        await ConvertToModel();

        _clients = (await ClientService.GetAllClientsAsync()).ToList();
        _operators = (await UserService.GetUsersByRoleAsync(Roles.Operator)).ToList();
        _masters = (await UserService.GetFreeMastersAsync()).ToList();
        _places = (await DevicePlaceService.GetFreePlacesAsync()).ToList();
        _defects = (await DefectService.GetAllValuesAsync()).ToList();
        _appearances = (await AppearanceService.GetAllValuesAsync()).ToList();
        _deviceTypes = (await DeviceTypeService.GetAllValuesAsync()).ToList();
        _brands = (await BrandService.GetAllValuesAsync()).ToList();

        _isLoaded = false;

        StatusChanged();

        await base.OnInitializedAsync();
    }

    private async Task ConvertToModel()
    {
        if (order is null) return;

        _model.Appearance = await AppearanceService.GetReferenceByIdAsync(order.AppearanceId);
        _model.Client = await ClientService.GetClientByIdAsync(order.ClientId);
        _model.Operator = await UserService.GetUserByIdAsync(order.OperatorId);
        _model.Master = await UserService.GetUserByIdAsync(order.MasterId);
        _model.Place = await DevicePlaceService.GetPlaceByIdAsync(order.DevicePlaceId);
        _model.RepairType = order.RepairType;
        _model.Defect = await DefectService.GetReferenceByIdAsync(order.DefectId);
        _model.DeviceType = await DeviceTypeService.GetReferenceByIdAsync(order.DeviceTypeId);
        _model.Brand = await BrandService.GetReferenceByIdAsync(order.BrandId);
        _model.Model = order.Model;
        _model.Password = order.DevicePassword;
        _model.SpareParts = new List<OrderListModel<SparePart>>(order.SpareParts ?? new());
        _model.Facilities = new List<OrderListModel<Facility>>(order.Facilities ?? new());
        _model.Money = order.Money;
        _model.OrderId = order.OrderId;
        _model.OrderDate = order.OrderDate;
        _model.Status = order.Status;
    }

    private Order ConvertToOrder()
    {
        return new Order
        {
            OrderId = _model.OrderId!,
            OrderDate = _model.OrderDate,
            ClientId = _model.Client!.ClientId,
            DefectId = _model.Defect!.DefectId,
            AppearanceId = _model.Appearance!.AppearanceId,
            DeviceTypeId = _model.DeviceType!.DeviceTypeId,
            BrandId = _model.Brand!.BrandId,
            Model = _model.Model ?? string.Empty,
            DevicePassword = _model.Password ?? string.Empty,
            OperatorId = _model.Operator!.UserId,
            MasterId = _model.Master!.UserId,
            Status = _model.Status,
            RepairType = _model.RepairType,
            SpareParts = new List<OrderListModel<SparePart>>(_model.SpareParts ?? new()),
            Facilities = new List<OrderListModel<Facility>>(_model.Facilities ?? new()),
            Money = _model.Money,
            DevicePlaceId = _model.Place!.PlaceId
        };
    }

    private async void SparePartRowClickEvent(TableRowClickEventArgs<OrderListModel<SparePart>> tableRowClickEventArgs)
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullWidth = true, MaxWidth = MaxWidth.Medium
        };
        var order = await OrderService.GetOrderByIdAsync(_model.OrderId!);
        int maxCount;
        if (order?.SpareParts?
            .FirstOrDefault(x => x.Item.SparePartId == tableRowClickEventArgs.Item.Item.SparePartId) is not null)
        {
            maxCount = tableRowClickEventArgs.Item.ItemCount +tableRowClickEventArgs.Item.Item.Count;
        }
        else
        {
            maxCount = tableRowClickEventArgs.Item.ItemCount;
        }
        var parameters = new DialogParameters
        {
            {"SelectedSparePart", tableRowClickEventArgs.Item},
            {"MaxCount", maxCount}
        };

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<SparePart>) result.Data;
        if (result.Canceled) return;

        if (order is null) return;

        if (_model.SpareParts is null)
        {
            return;
        }

        var editSparePart = _model.SpareParts
            .FirstOrDefault(x => x.Item.SparePartId == tableRowClickEventArgs.Item.Item.SparePartId);

        editSparePart!.Item = sparePart.Item;
        editSparePart.ItemCount = sparePart.ItemCount;
        editSparePart.Discount = sparePart.Discount;
        _sparePartTable?.UpdateSelection();

        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                                         + _model.Facilities!.Sum(x => x.Sum), 2);
    }

    private async Task OrderSparePartAddWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullWidth = true, MaxWidth = MaxWidth.Medium
        };
        var parameters = new DialogParameters {{"SelectedSparePart", null}};

        var dialog = await DialogService.ShowAsync<OrderSparePartWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<SparePart>) result.Data;
        if (result.Canceled) return;

        if (order is null) return;

        if (_model.SpareParts is null)
        {
            return;
        }
        _model.SpareParts.Add(sparePart);
        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                                         + _model.Facilities!.Sum(x => x.Sum), 2);
    }

    private async void FacilityRowClickEvent(TableRowClickEventArgs<OrderListModel<Facility>> tableRowClickEventArgs)
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullWidth = true, MaxWidth = MaxWidth.Medium
        };
        var parameters = new DialogParameters {{"SelectedFacility", tableRowClickEventArgs.Item}};

        var dialog = await DialogService.ShowAsync<OrderFacilityWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<Facility>) result.Data;
        if (result.Canceled) return;

        if (order is null) return;

        if (_model.Facilities is null)
        {
            return;
        }

        var editSparePart = _model.Facilities
            .FirstOrDefault(x => x.Item.FacilityId == tableRowClickEventArgs.Item.Item.FacilityId);

        editSparePart!.Item = sparePart.Item;
        editSparePart.ItemCount = sparePart.ItemCount;
        editSparePart.Discount = sparePart.Discount;
        _facilityTable?.UpdateSelection();

        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                                         + _model.Facilities!.Sum(x => x.Sum), 2);
    }

    private async Task OrderFacilityAddWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullWidth = true, MaxWidth = MaxWidth.Medium
        };
        var parameters = new DialogParameters {{"SelectedFacility", null}};

        var dialog = await DialogService.ShowAsync<OrderFacilityWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        var sparePart = (OrderListModel<Facility>) result.Data;
        if (result.Canceled) return;

        if (order is null) return;

        if (_model.Facilities is null)
        {
            return;
        }
        _model.Facilities.Add(sparePart);
        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                                         + _model.Facilities!.Sum(x => x.Sum), 2);
    }

    private async Task DeleteSpareParts()
    {
        if (_selectedSpareParts.Count == 0)
        {
            return;
        }

        if (_model.SpareParts is null)
        {
            return;
        }

        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true, DisableBackdropClick = true
        };
        var parameters = new DialogParameters
        {
            {"ContentText", "Удаленные записи придется добавить заного. Вы уверены?"},
            {"ButtonText", "Удалить"},
            {"Color", Color.Error}
        };

        var dialog = await DialogService.ShowAsync<CloseWindow>("Закрыть", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            return;
        }

        foreach (var selectedSparePart in _selectedSpareParts)
        {
            _model.SpareParts.Remove(selectedSparePart);
        }

        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                                         + _model.Facilities!.Sum(x => x.Sum), 2);
        Snackbar.Add("Успешно", Severity.Success);
    }

    private async Task DeleteFacilities()
    {
        if (_selectedFacilities.Count == 0)
        {
            return;
        }

        if (_model.Facilities is null)
        {
            return;
        }

        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true, DisableBackdropClick = true
        };
        var parameters = new DialogParameters
        {
            {"ContentText", "Удаленные записи придется добавить заного. Вы уверены?"},
            {"ButtonText", "Удалить"},
            {"Color", Color.Error}
        };

        var dialog = await DialogService.ShowAsync<CloseWindow>("Закрыть", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        if (result.Canceled)
        {
            return;
        }

        foreach (var selectedFacility in _selectedFacilities)
        {
            _model.Facilities.Remove(selectedFacility);
        }
        _model.Money = Math.Round(_model.SpareParts!.Sum(x => x.Sum)
                       + _model.Facilities!.Sum(x => x.Sum), 2);
        Snackbar.Add("Успешно", Severity.Success);
    }


    private async Task SaveChanges()
    {
        var order = await OrderService.GetOrderByIdAsync(_model.OrderId!);
        var transaction = await TransactionService.GetTransactionByOrderAsync(order?.OrderId!);

        if (_model.Status == OrdersStatuses.Closed && transaction is null)
        {
            var closeOnEscapeKey = new DialogOptions
            {
                CloseOnEscapeKey = false, CloseButton = false, DisableBackdropClick = true
            };
            var parameters = new DialogParameters
            {
                {"Money", _model.Money},
                {"OrderId", _model.OrderId!},
            };

            var dialog = await DialogService.ShowAsync<PaymentWindow>("Оплата заказа", parameters, closeOnEscapeKey);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                Snackbar.Add("Оплата оформлена успешно", Severity.Success);
            }
        }
        var res = await OrderService.UpdateOrderAsync(order!, ConvertToOrder());

        if (res.Success)
        {
            Snackbar.Add("Заказ успешно сохранен", Severity.Success);
            _places = (await DevicePlaceService.GetFreePlacesAsync()).ToList();
        }
        StatusChanged();
    }

    private async Task CloseWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true, DisableBackdropClick = true
        };
        var parameters = new DialogParameters
        {
            {"ContentText", "Все не сохраненные изменения будут утеряны"},
            {"ButtonText", "Закрыть"},
            {"Color", Color.Error}
        };

        var dialog = await DialogService.ShowAsync<CloseWindow>("Закрыть", parameters, closeOnEscapeKey);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            MudDialog.Close();
        }
    }

    private void StatusChanged()
    {
        switch (_model.Status)
        {
            case OrdersStatuses.Closed or OrdersStatuses.ClosedWithProblems:
                _canEdit = false;
                return;
            case OrdersStatuses.Finished when UserInfoHolder.CurrentUser!.Roles == Roles.Operator:
                _canEdit = false;
                return;
            default:
                _canEdit = true;
                break;
        }
    }

    private async Task Print()
    {
        await IJS.InvokeAsync<object>("open", new object[] { $"/orderPrint/{_model.OrderId}", "_blank"});
    }
}