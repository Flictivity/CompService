@using CompService.Core.Models

@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

<MudDialog DefaultFocus="DefaultFocus.LastChild">
    <DialogContent>
        <MudContainer Class="d-flex justify-start flex-row pa-0 mt-5 align-self-center">
            <MudText Class="mr-5" Style="line-height: 37px;">Услуга:</MudText>
            <MudText Class="mr-5" Style="line-height: 37px;">
                @(SelectedFacility is null ? "..." : SelectedFacility.Item.Name)
            </MudText>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenWindow">Выбрать</MudButton>
        </MudContainer>
        <MudNumericField T="int" Min="0" 
                         Max="10"
                         Required="true" @bind-Value="_count" RequiredError="Обязательное поле" 
                         Label="Количество" Class="mb-3"/>
        <MudTextField Required="true" @bind-Value="_discount"
                              RequiredError="Обязательное поле" Label="Скидка" 
                              Class="mb-3"/>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit" 
                   Class="mx-auto">@(_isEditing ? "Изменить" : "Добавить")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    [Parameter]
    public OrderListModel<Facility>? SelectedFacility { get; set; }
    
    private int _count;
    private double _discount;
    private bool _isEditing;

    protected override async Task OnInitializedAsync()
    {
        if (SelectedFacility is not null)
        {
            _isEditing = true;
            _count = SelectedFacility.ItemCount;
            _discount = SelectedFacility.Discount;
        }
        await base.OnInitializedAsync();
    }

    private void Submit()
    {
        if (SelectedFacility is null)
        {
            Snackbar.Add("Необходимо выбрать услугу", Severity.Error);
            return;
        }
        if (_count <= 0)
        {
            Snackbar.Add("Используемое количество должно быть больше 0", Severity.Error);
            return;
        }
        if (_discount < 0)
        {
            Snackbar.Add("Скидка не может быть отрицательной", Severity.Error);
            return;
        }
        SelectedFacility.ItemCount = _count;
        SelectedFacility.Discount = _discount;
        SelectedFacility.Sum = SelectedFacility.Item.Cost * _count
                                - SelectedFacility.Item.Cost * _count * _discount * 0.01;
        MudDialog.Close(DialogResult.Ok(SelectedFacility));  
    }

    private async void OpenWindow()
    {
        var options = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium
                
        };

        var dialog = await DialogService.ShowAsync<FacilitiesWindow>("", options);
        var result = await dialog.Result;

        if (result.Canceled) return;
        
        SelectedFacility ??= new OrderListModel<Facility>();
        SelectedFacility.Item = (Facility)result.Data;
        StateHasChanged();
    }
}