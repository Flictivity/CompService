@page "/orders"
@using CompService.Core.Models
@using CompService.Core.Services
@using CompService.Core.Enums

@inject IOrderService OrderService;
@inject IClientService ClientService;
@inject IReferenceService<Appearance> AppearanceService;
@inject IReferenceService<Brand> BrandService;
@inject IReferenceService<Defect> DefectService;
@inject IReferenceService<DeviceType> DeviceTypeService;
@inject UserInfoHolder UserInfoHolder;
@inject ISparePartService SparePartService;
@inject IFacilityService FacilityService;
@inject IDevicePlaceService DevicePlaceService;

<MudTable Items="_orders" T="OrderTableModel" Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Заказы</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.OrderId)">Заказ</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Status)">Статус</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.ClientSurname)">Клиент</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Defect)">Неисправность</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.OperatorName)">Оператор</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.MasterName)">Исполнитель</MudTableSortLabel>
        </MudTh>
        <MudTh>Место на стойке</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Sum)">Итоговая сумма</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Заказ">
            <MudStack>
                <MudText>@context.OrderId</MudText>
                <MudText>@context.OrderDate.ToString("dd/MM/yyyy")</MudText>
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Статус">
            <MudText>@context.Status</MudText>
        </MudTd>
        <MudTd DataLabel="Клиент">
            <MudStack>
                <MudText>@context.ClientSurname</MudText>
                <MudText>@context.ClientPhoneNumber</MudText>
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Неиcправность">
            <MudText>@context.Defect</MudText>
        </MudTd>
        <MudTd DataLabel="Оператор">
            <MudText>@context.OperatorName</MudText>
        </MudTd>
        <MudTd DataLabel="Исполнитель">
            <MudText>@context.MasterName</MudText>
        </MudTd>
        <MudTd DataLabel="Место на стойке">
            <MudText>@context.Place</MudText>
        </MudTd>
        <MudTd DataLabel="Итоговая сумма">
            <MudText>@context.Sum</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudFab Style="position: fixed; bottom: 0; right: 0; margin: 35px 25px;" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="async () => await OpenWindow()"/>

@code {
    private string _searchString = "";
    private List<OrderTableModel>? _orders;

    protected override async Task OnInitializedAsync()
    {
        _orders = (await OrderService.GetAllOrdersForTableAsync()).ToList();
        await base.OnInitializedAsync();
    }

    private async Task OpenWindow()
    {
        var newOrder = new Order
        {
            OrderDate = DateTime.Now,
            ClientId = (await ClientService.GetAllClientsAsync()).ToList()[0].ClientId,
            DefectId = (await DefectService.GetAllValuesAsync()).ToList()[0].DefectId,
            AppearanceId = (await AppearanceService.GetAllValuesAsync()).ToList()[0].AppearanceId,
            DeviceTypeId = (await DeviceTypeService.GetAllValuesAsync()).ToList()[0].DeviceTypeId,
            BrandId = (await BrandService.GetAllValuesAsync()).ToList()[0].BrandId,
            Model = "Xiaomi",
            DevicePassword = null,
            OperatorId = UserInfoHolder.CurrentUser?.UserId!,
            MasterId = UserInfoHolder.CurrentUser?.UserId!,
            Status = OrdersStatuses.NewOrder,
            RepairType = RepairTypes.Warranty,
            SpareParts = new List<OrderListModel<SparePart>> {new() {Item = (await SparePartService.GetAllSparePartsAsync()).ToList()[0], Count = 1, Discount = 0, Sum = 1}},
            Facilities = new List<OrderListModel<Facility>> {new() {Item = (await FacilityService.GetAllFacilitiesAsync()).ToList()[0], Count = 1, Discount = 0, Sum = 1}},
            Money = 1,
            DevicePlaceId = (await  DevicePlaceService.GetAllPlacesAsync()).ToList()[0].PlaceId
        };
        var res = await OrderService.CreateAsync(newOrder);
        if (res.Success)
        {
            _orders = (await OrderService.GetAllOrdersForTableAsync()).ToList();
            StateHasChanged();
        }
    }
}