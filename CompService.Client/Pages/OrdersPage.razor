@page "/orders"
@using CompService.Core.Models
@using CompService.Core.Services
@using CompService.Client.Data
@using CompService.Client.Windows
@using CompService.Core.Extensions

@inject IOrderService OrderService;
@inject ISnackbar Snackbar;
@inject IDialogService DialogService;

@if (_orders is null)
{
    <MudProgressCircular Class="d-flex mx-auto" Color="Color.Primary" Style="height:200px;width:200px; margin-top: 30vh"
                             Indeterminate="true"/> 
}
<MudTable Items="_orders" T="OrderTableModel" Hover="true" Filter="new Func<OrderTableModel, bool>(FilterFunc1)" 
          OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Заказы</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" 
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.OrderId)">Заказ</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Status)">Статус</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.ClientSurname)">Клиент</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Defect)">Неисправность</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.OperatorName)">Оператор</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.MasterName)">Исполнитель</MudTableSortLabel>
        </MudTh>
        <MudTh>Место на стойке</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<OrderTableModel, object>(x => x.Sum)">Итоговая сумма</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Заказ">
            <MudStack>
                <MudText>@context.OrderId</MudText>
                <MudText>@context.OrderDate.ToString("dd/MM/yyyy")</MudText>
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Статус">
            <MudChip Style="@($"color:#FFFFFF; background:{StatusColors.StatusColor[context.Status]};")">@context.Status.GetName()</MudChip>
        </MudTd>
        <MudTd DataLabel="Клиент">
            <MudStack>
                <MudText>@context.ClientSurname</MudText>
                <MudText>@context.ClientPhoneNumber</MudText>
            </MudStack>
        </MudTd>
        <MudTd DataLabel="Неиcправность">
            <MudText>@context.Defect</MudText>
        </MudTd>
        <MudTd DataLabel="Оператор">
            <MudText>@context.OperatorName</MudText>
        </MudTd>
        <MudTd DataLabel="Исполнитель">
            <MudText>@context.MasterName</MudText>
        </MudTd>
        <MudTd DataLabel="Место на стойке">
            <MudText>@context.Place</MudText>
        </MudTd>
        <MudTd DataLabel="Итоговая сумма">
            <MudText>@context.Sum</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudFab Style="position: fixed; bottom: 0; right: 0; margin: 35px 25px;" Color="Color.Primary" 
        Icon="@Icons.Material.Filled.Add" OnClick="async () => await OpenWindow()"/>

@code {
    private string _searchString = "";
    private List<OrderTableModel>? _orders;

    protected override async Task OnInitializedAsync()
    {
        _orders = (await OrderService.GetAllOrdersForTableAsync()).ToList();
        await base.OnInitializedAsync();
    }
    
    private bool FilterFunc1(OrderTableModel element) => FilterFunc(element, _searchString);

    private bool FilterFunc(OrderTableModel element, string? searchingString)
    {
        if (string.IsNullOrWhiteSpace(searchingString))
            return true;
        if (element.ClientSurname.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.MasterName.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OperatorName.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.OrderId.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Defect.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private async Task OpenWindow()
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<OrderCreateWindow>("Новый заказ", closeOnEscapeKey);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _orders = null;
            _orders = (await OrderService.GetAllOrdersForTableAsync()).ToList();
            Snackbar.Add("Успешно", Severity.Success);
            StateHasChanged();
        }
    }

    private async void RowClickEvent(TableRowClickEventArgs<OrderTableModel> tableRowClickEventArgs)
    {
        var closeOnEscapeKey = new DialogOptions
        {
            CloseOnEscapeKey = true, CloseButton = true,
            FullScreen = true
        };
        var parameters = new DialogParameters {{"SelectedOrderId", tableRowClickEventArgs.Item.OrderId}};

        var dialog = await DialogService.ShowAsync<OrderEditWindow>("", parameters, closeOnEscapeKey);
        var result = await dialog.Result;

        if (result.Canceled) return;

        _orders = null;
        _orders = (await OrderService.GetAllOrdersForTableAsync()).ToList();
        StateHasChanged();
    }

}

