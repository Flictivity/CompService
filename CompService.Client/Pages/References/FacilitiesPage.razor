@page "/facilities"
@using CompService.Core.Services
@using CompService.Core.Models
@using CompService.Client.Windows

@inject UserInfoHolder UserInfoHolder;
@inject IFacilityService FacilityService;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar;

@if (UserInfoHolder.CurrentUser is null)
{
    <h1>Недостаточно прав</h1>
    return;
}

<MudTable Items="@_facilities" T="Facility" OnRowClick="RowClickEvent" Filter="new Func<Facility, bool>(FilterFunc1)" Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Услуги</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Facility, object>(x=>x.Name)">Название</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Facility, object>(x=>x.Cost)">Стоимость</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Название">
            <MudText>@context.Name</MudText>
        </MudTd>
        <MudTd DataLabel="Стоимость">
            <MudText>@context.Cost</MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudFab Style="position: fixed; bottom: 0; right: 0; margin: 35px 25px;" Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="async () => await OpenWindow()"/>

@code {
    private List<Facility>? _facilities;
    string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        _facilities = (await FacilityService.GetAllFacilities()).ToList();
        await base.OnInitializedAsync();
    }
    
    private bool FilterFunc1(Facility element) => FilterFunc(element, _searchString);
    
    private bool FilterFunc(Facility element, string? searchingString)
    {
        if (string.IsNullOrWhiteSpace(searchingString))
            return true;
        if (element.Name.Contains(searchingString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    
    private async void RowClickEvent(TableRowClickEventArgs<Facility> tableRowClickEventArgs)
    {
        DialogOptions closeOnEscapeKey = new DialogOptions {CloseOnEscapeKey = true};
        DialogParameters parameters = new DialogParameters
        {
            {"SelectedFacility", tableRowClickEventArgs.Item}
        };
        var dialog = await DialogService.ShowAsync<FacilityWindow>("Изменение",
            parameters, closeOnEscapeKey);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _facilities = (await FacilityService.GetAllFacilities()).ToList();
            Snackbar.Add("Успешно", Severity.Success);
            StateHasChanged();
        }
    }
    
    private async Task OpenWindow()
    {
        DialogOptions closeOnEscapeKey = new DialogOptions {CloseOnEscapeKey = true};
        DialogParameters parameters = new DialogParameters
        {
            {"SelectedFacility", null},
        };
        var dialog = await DialogService.ShowAsync<FacilityWindow>("Новая запись",parameters, closeOnEscapeKey);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _facilities = (await FacilityService.GetAllFacilities()).ToList();
            StateHasChanged();
        }
    }
}