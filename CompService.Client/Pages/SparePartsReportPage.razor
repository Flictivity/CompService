@page "/sparePartsReport"
@using CompService.Core.Models;
@using CompService.Core.Services;

@inject IReferenceService<SparePartCategory> SparePartCategoryService;
@inject IReportService ReportService;

<PageTitle>Остатки на складе</PageTitle>

<MudContainer Class="d-flex flex-row ma-0 align-center flex-wrap">
    <MudAutocomplete T="SparePartCategory" Label="Категория" SearchFunc="@Search1"
                     ResetValueOnEmptyText="true"
                     CoerceText="true" ValueChanged="CategoryChange"
                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")" />
    <MudStack Row="true" Class="d-flex align-items-center">
        <MudText Typo="Typo.h6">Итого: </MudText>
        <MudText Typo="Typo.body1" Style="line-height: 32px;">Количество - <b>@_model?.TotalCount</b></MudText>
        <MudText Typo="Typo.body1" Style="line-height: 32px;">Цена - <b>@_model?.TotalPrice</b></MudText>
        <MudText Typo="Typo.body1" Style="line-height: 32px;">Себестоимость - <b>@_model?.TotalCost</b></MudText>
    </MudStack>
</MudContainer>

<MudTable T="SparePart" Items="@_model?.SpareParts" Hover="true" Striped="true">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<SparePart, object>(x => x.Article)">Артикул</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<SparePart, object>(x => x.Name)">Название</MudTableSortLabel>
        </MudTh>
        <MudTh>Категория</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<SparePart, object>(x => x.Count)">Количество</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<SparePart, object>(x => x.RetailPrice)">Цена</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<SparePart, object>(x => x.PurchasePrice)">Себестоимость</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Артикул"><MudText>@context.Article</MudText></MudTd>
        <MudTd DataLabel="Название"><MudText>@context.Name</MudText></MudTd>
        <MudTd DataLabel="Категория"><MudText>@context.Category.Name</MudText></MudTd>
        <MudTd DataLabel="Количество"><MudText>@context.Count</MudText></MudTd>
        <MudTd DataLabel="Цена"><MudText>@(context.Count * context.PurchasePrice)</MudText></MudTd>
        <MudTd DataLabel="Себестоимость"><MudText>@(context.Count * context.RetailPrice)</MudText></MudTd>
    </RowTemplate>
</MudTable>


    @code {
    private List<SparePartCategory>? _categories;
    private SparePartsReportModel? _model;

    protected override async Task OnInitializedAsync()
    {
        _categories = (await SparePartCategoryService.GetAllValuesAsync()).ToList();
        _model = await ReportService.GetSparePartsReportAsync(null);
        await base.OnInitializedAsync();
    }

    private async Task<IEnumerable<SparePartCategory>> Search1(string value)
    {
        if (string.IsNullOrEmpty(value))
            return _categories ?? new();
        return _categories!.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task CategoryChange(SparePartCategory category)
    {
        _model = await ReportService.GetSparePartsReportAsync(category);
    }
}