@page "/authp"
@using Microsoft.AspNetCore.Components
@using CompService.Client.Data
@using IAuthorizationService = Core.Services.IAuthorizationService
@inject IAuthorizationService AuthorizationService;
@inject ISnackbar Snackbar;
@inject NavigationManager Nav;
@inject Blazored.LocalStorage.ILocalStorageService Session;
@inject AppState AppState;

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">Вход. Введите почту для получения кода</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudForm Model="@_model" @ref="@_form" @bind-IsValid="@_success">
        <MudCardContent>
            <MudTextField T="string" @bind-Value="_model.Email" InputType="InputType.Email" Label="Почта" Required="true"
                          RequiredError="Почта должна быть заполнена"
                          Validation="@(new EmailAddressAttribute {ErrorMessage = "Введенная почта не корректна"})" 
                          Class="mb-3"/>
            <MudTextField T="string" InputType="InputType.Password" @bind-Value="_model.Password"
                          Label="Пароль" Required="true"
                          RequiredError="Пароль не может быть пустым" Class="mb-3"/>
            <MudText Align="Align.Center" Typo="Typo.subtitle2">При входе в систему вы принимаете условия пользовательского соглашения</MudText>
        </MudCardContent>
        <MudCardActions Class="d-flex flex-column">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" Class="mb-3 mx-auto"
                       OnClick="async () => await Authorization()">
                Авторизация
            </MudButton>
            <MudLink Class="mt-3" Typo="Typo.subtitle2" Href="/"
                     Underline="Underline.Hover">
                Забыли пароль?
            </MudLink>
        </MudCardActions>
    </MudForm>
</MudCard>

@code {
    private bool _success;
    private MudForm? _form;
    private readonly LoginCredentials _model = new();

    private async Task Authorization()
    {
        var res = await AuthorizationService.AuthorizeWithPassword(_model.Email, _model.Password);
        if (res.Success)
        {
            await Session.SetItemAsync("UserSession", res.User);
            Snackbar.Add("Успешно", Severity.Success);
            AppState.LoggedIn = true;
            Nav.NavigateTo("/cabinet");
        }
        else
        {
            Snackbar.Add(res.Message, Severity.Error);
        }
    }

}